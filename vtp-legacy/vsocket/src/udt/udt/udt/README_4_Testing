This README is a quick tutorial for people who want to 
test UDT for efficiency/fairness issues.

[If you want to use UDT in production applications, this tutorial is not 
comprehensive enough.  Please read the full documentation carefully.]

0. QUICK START:
The simplest method is to use the "appserver" and "appclient" programs in
./app directory. The "appclient" will send data to "appserver" and 
print the performance trace to the screen.

1. MUST DO:
a) Uncomment #-DTRACE in the Makefiles of both ./src and ./app directories.
b) Modify MTU configuration in appserver.cpp and appclient.cpp if there is not 
   1500 bytes on your system. (UDT does not have MTU discovery functionality).

2. OPTIONAL:
a) The default trace output is every 1 second. You can modify it to other 
   intervals by adding a parameter in the trace() method.
   Example:
      trace(500000) will print the performance trace every 0.5 seconds 
      (500000 microseconds).
b) The value of the flow window size (UDT_FC) and UDP buffer size may affect
   performance; you can tune them if the performance is far from what you 
   expect. UDT_FC is similar to TCP buffer size, but it is in number of 
   packets, which is in MTU size. 
   Example:
      set FC to a value not less than BDP, i.e., 
      Bandwidth (bps) * RTT (sec) / MTU (bytes) / 8.
   The current value is 100000 packets, which should be large enough for 
   most of networks.

3. Note on the testing results on real networks:
The end system may have greater, or less, impact on protocols like TCP and UDP.
Try to avoid starting concurrent flows on the same end hosts. Instead,
use multiple computer pairs to share 1 link if possible. Also, running the same 
test on different machines may be helpful in isolating the external 
environmental impacts.

4. QUESTIONS?
If you experience any problems in testing, please write to me <gu@lac.uic.edu>.
I will respond as quickly as possible.
